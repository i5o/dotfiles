#!/bin/sh
# vim: set ft=sh et sw=4 sts=4 ts=4:

# enhanced pgrep # from meonkey's .bashrc


colordirdiff ()
{
    serverA=$1;
    serverB=$2;
    thedir=$3;
    if [[ -x $(which colordiff ) ]]; then
        colordiff -y --side-by-side <(ssh $1 "cd $thedir; find . -maxdepth 1 -type f -exec md5sum {} \;| sort -k 2") <(ssh $2 "cd $thedir; find . -maxdepth 1 -type f -exec md5sum {} \;| sort -k 2")
    else 
        diff -y --side-by-side <(ssh $1 "cd $thedir; find . -maxdepth 1 -type f -exec md5sum {} \;| sort -k 2") <(ssh $2 "cd $thedir; find . -maxdepth 1 -type f -exec md5sum {} \;| sort -k 2")
    fi  
}

cmddiff ()
{

    CMD1="$1"
    CMD2="$2"
    if [[ -x $(which colordiff ) ]]; then
        colordiff -W 200 -y --side-by-side <( eval "${CMD1}" ) <( eval "${CMD2}" )
    else
        diff -W 200 -y --side-by-side <( eval "${CMD1}" ) <( eval "${CMD2}" )
    fi

}



# inspired by tpope :)
function FINDDIR(){ 
    find "$@" -mindepth 1 -type d 2> /dev/null
}
function FIND(){ 
    find "$@" ! -type d 2> /dev/null
}

function decolor(){
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}

function list_latest()
{
    local file files=("${1:-.}/"*) latest=$files;
    for file in "${files[@]}"; do
        [[ $file -nt $latest ]] && latest=$file;
    done;
    echo "$latest"
}

function list_files()
{
    local file files=("${1:-.}/"*)
    for file in "${files[@]}"; do
        [[ -f "$file" ]] && echo $file
    done;
}

function _list_dotfiles()
{
    local file files=("${1:-.}/".*)
    for file in "${files[@]}"; do
        [[ "$file" = "./." ]] && continue
        [[ "$file" = "./.." ]] && continue
        [[ -d "$file" ]] && echo $file
    done
}

function _list_paths {
	echo -e "${PATH//:/\n}";
}

# http://bash-hackers.org/wiki/doku.php/snipplets/prargs
function print_arglist () {
   printf '"%b"\n' "$0" "$@" | nl -v0 -s": "
}

function inspect() { echo "\$$1 = ${!1}"; };

function p() {
    prog=$1
    found=`pgrep $prog`
    # command name width
    if [ ! -z "$2" ]
        then cmdwide='cmd -ww'
        else cmdwide='comm'
    fi
    if [ ! -z "$prog" ] && [ ! -z "$found" ]; then
        ps -o user,pid,ppid,%cpu,%mem,stat,$cmdwide -p `pgrep $prog`
    fi
}

pw() {
    p "$1" show_wide_command_line
}


mkcd ()
{
    mkdir "$@" && cd "${!#}"
}

cdl() {
if [ "$1" ]
    then builtin cd "$1" && ll
    else builtin cd && ll
fi
}

function mkt () {
    DIR=${HOME}/tmp
    TEMPLATE=tmp.$(date "+%m-%d")

    if [ -d $DIR/$TEMPLATE/ ]; then
         cd $DIR/$TEMPLATE && ls -l *
    else
        mkdir $DIR/$TEMPLATE && cd $DIR/$TEMPLATE
    fi
}

#we don't want these functions defined on any IR servers
if [ "$(whoami)" != "spowers" ]; then

    function tmpfile () {
        basedir=${HOME}/public_html/tmpfiles
        extension=html

        while test $# -gt 0; do
            case $1 in 
                -e | --e )
                    shift; extension="$1"
                    ;;
                -d | --dir )
                    shift; baseidr="$1"
                    ;;
                *)
                    break
                    ;;
            esac
        done
        file="${basedir}/$(date +%F.%s).${extension}";
        echo $file
        while read line; do
            echo "$line" >> $file;
        done;

        echo "${file/$basedir/http://www.sente.cc/stu/tmpfiles}"
    }



    function snapshot-show () {
        arg=$(readlink -m "$1")
        echo "arg=$arg" >&2
        snapdirs=(/snapshots/{daily,weekly,monthly}.*/sente)
        for f in "${snapdirs[@]}"; do
            if [[ -f ${f}${arg} ]] ; then
                echo ${f}${arg}
            else
                echo ${f}${arg} "[missing]">&2
            fi
        done
    }

    function snapdiff() {
        snapshot-show $1 2> /dev/null | xargs md5sum | awk '{if(!foo[$1]++){print $2}}' | while read line; do
            if  [[ $(which colordiff) ]]; then
                CCC="diff --side-by-side --suppress-common-lines  $LAST $line | colordiff";
            else
                CCC="diff --side-by-side --suppress-common-lines  $LAST $line";
            fi
            echo $CCC;
            eval $CCC;
            echo -e "\n\n\n\n\n";
            LAST=$line;
        done 
#| ansi2html.sh --bg=dark > public_html/bahtown.html
    }

    snapdiff2 ()
    {
        echo 'ls -1t /snapshots/daily.*/some/file | snapdiff2' >&2
        echo '-e to run the commands ' >&2
        

        while read meta; do
            md5sum $meta;
        done | awk '{if(!foo[$1]++){print $2}}' | while read line; do
            if [[ -n $(which colordiff) ]]; then
                CCC="diff --side-by-side --suppress-common-lines  $LAST $line | colordiff";
            else
                CCC="diff --side-by-side --suppress-common-lines  $LAST $line";
            fi;
            echo $CCC;
            LAST=$line;
        done
    }

fi


function epochtime () {
    dddd="$1"
    shift
    ffff="$2"
    shift
#    rest="$3"
    date --date "1970-01-01 UTC $dddd seconds" $ffff #$rest" 
}

#taken from !du-h in #bash
function dusk () {
   du -sk "$@" | 
   sort -n  |
   awk -F'\t' '{
      if ($1 > 1000000)   printf("%.2fG\t%s\n",$1/1000000,$2);
      else if ($1 > 1000) printf("%.2fM\t%s\n",$1/1000,$2);
      else                printf("%sk\t%s\n",  $1,$2)
   }';
}

dumdl ()
{
    for mdl in "$@"; do
        if [[ -f "$mdl" && "$mdl" == *.mdl ]]; then
            mdlbase=${mdl%%.mdl};
            mdlsize=$(du -sck "${mdlbase}"*|grep total|cut -f1);
            #mdlhumansize=$(awk -v m=${mdlsize} 'BEGIN{printf "%.02f",(m/(1024)/1024)}' 1);
            echo -e "${mdlsize}\t${mdlbase}.mdl";
            #echo -e "${mdlhumansize}\t${mdlsize}\t${mdlbase}*";
        fi
    done | sort -n |
        awk '{
            if ($1 > 1000000)   printf("%.2fG\t%s\n",$1/1000000,$2);
            else if ($1 > 1000) printf("%.2fM\t%s\n",$1/1000,$2);
            else                printf("%sk\t%s\n",  $1,$2)
        }';
}


function webget() {
if [ -x "`which curl`" ]; then
   get="curl -s"
else
   get="wget -qO -"
fi
}

function pyget() {
   python -c "import urllib2; print urllib2.urlopen(\"$1\").read()"
}

function webheaders() {
   python -c "import urllib2; print urllib2.urlopen(\"$1\").info()"
}

function assert_file {
   ONE=$1
   [[ -z "$ONE" ]] && { echo "MISSING PARAMETER"; return 1; };
   [[ -f "$ONE" ]] || { echo "$ONE: IS NOT A FILE"; return 1; };
}


function pipelast () {
   history 2 | sed 2d | colopipe
   history 2 | sed 2d | emailpipe
}

function sendlast () {
   history 2 | sed 2d | colopipe
}

function sendlast2 () {
   history 2 | sed 2d | emailpipe
}

function emailpipe () {
   curl -F "note=<-" http://sente.cc/cgi-bin/email.pl
}

function curlnote () {
   if [ ! -f "$1" ]; then echo "$1 is not a file"; return 1; fi
   curl -F "note=<$1" http://sente.cc/cgi-bin/note.pl 2>/dev/null | grep -m1 -o -E '"http://[^"]+"'
#  curl -F "note=<$1" http://sente.cc/cgi-bin/note.pl 2>/dev/null  
   echo "http://sente.cc/notes/recent/"
   #curl -F "note=<$1" http://sente.cc/cgi-bin/note.pl 2>/dev/null | grep -o -E 'http://[0-9_a-zA-Z./-]+'
}
function webdiff () {
   if [ ! -f "$1" ]; then echo "$1 is not a file"; return 1; fi
   if [ ! -f "$2" ]; then echo "$2 is not a file"; return 1; fi
   F1=$(basename $1); F2=$(basename $2)
   if [ $F1 = $F2 ]; then
      F1=$F1.1
      F2=$F2.2
   fi
   curl -F "file.1=@$1;filename=${F1}" \
        -F "file.2=@$2;filename=${F2}" \
        http://sente.cc/stu/cgi-bin/compare-bin.py 2>/dev/null \
         | grep -E "^http"
#        http://sente.cc/stu/cgi-bin/compare-bin.py 2>/dev/null \
#         | grep -A 100 "BEGIN LINKS" \
#            | grep '^http' 
   #curl -F "file.1=@$1" -F "file.2=@$2"  http://sente.cc/stu/cgi-bin/compare-bin.py 2>/dev/null | grep -A 100 "BEGIN LINKS" | grep '^http' 
}

function bucket () {
   FILE=$1
   test -f "$FILE" && 
   cp -a "$FILE" /home/stu/code/github/bucket/ &&
   FILE=$(basename $FILE)
   cd /home/stu/code/github/bucket/ &&
   git add "$FILE" &&
   git commit -m "$FILE" &&
   git push gitweb master && 
   cd -;
}
function dotadd() {
   FILE=$1
   arr=("$@")
   [ ${#arr[@]} -lt 2 ] && { echo "must pass params"; return 1; }

   test -f "$FILE" && 
   echo cp "${HOME}/${FILE}" "/home/stu/code/github/dotfiles/${FILE}" &&
   echo cd /home/stu/code/github/dotfiles/ &&
   echo git status &&
   echo git add "${FILE}" &&
   echo git commit -m ${arr[1]} &&
   echo git status &&
   echo git-archive --format=tar HEAD > /home/stu/dotfiles.tar &&
   echo cd - 


   cp "${HOME}/${FILE}" "/home/stu/code/github/dotfiles/${FILE}" &&
   cd /home/stu/code/github/dotfiles/ &&
   git status &&
   git add "${FILE}" &&
   git commit -m ${arr[1]} &&
   git status &&
   git-archive --format=tar HEAD > /home/stu/dotfiles.tar &&
   cd - 


#   git add "$FILE" &&
#   git commit -m "$FILE" &&
#   git push gitweb master && 
}

function git-tar () {
    cd /home/stu/code/github/dotfiles &&
    git-status &&
    git-archive --format=tar HEAD > /home/stu/dotfiles.tar
}

function curl_note () {
   curl -F "note=<-" http://sente.cc/cgi-bin/email.pl
}


#stolen from tpope:  http://www.tpope.net/node/108  http://c.tpope.net/
function get_tgzfile() {
   REMOTEFILE=http://sente.cc/stu/dotfiles.tgz
   DESTDIR=DOTFILES
   mkdir $DESTDIR || return 1

   if [ -x "`which curl`" ];
      then get="curl -s"
      else get="wget -qO -"
   fi
   $get $REMOTEFILE | gzip -dc | tar xf - -C $DESTDIR
   find $REMOTEFILE
}


function hlocate    { locate -d '/home/stu/.mlocate.db' "$@"; }
function irdaily    { locate -d '/var/lib/mlocate/mlocate.ir-daily.db'   "$@"; }

function locate_migration { locate -d '/var/lib/mlocate/mlocate.migration.db' "$@"; }
function locate_scratch   { locate -d '/var/lib/mlocate/mlocate.scratch.db'   "$@"; }
function locate_irdaily   { locate -d '/var/lib/mlocate/mlocate.ir-daily.db'  "$@"; }
function locate_all       { locate -d '/var/lib/mlocate/mlocate.all.db'       "$@"; }
function locate_snapshot { ls -1 /snapshots/locate/*.db; locate -d '/snapshots/locate/daily.0.db' "$@";  }

function ff         { find . -name "*$@*" -print 2>/dev/null; }

function psa        { ps aux $@; }
function psu        { ps  ux $@; }

function lpsa       { ps aux $@ | p; }
function lpsu       { ps  ux $@ | p; }

function psgrep     { ps ax | grep $1 | fgrep -v "grep $1"; }


# Rename *.foo to *.bar
function rename_ext {
    fr=$1
    to=$2
    shift; shift; 
    for f in "${@}"; do
        #make sure the file extension matches
        [[ ${f##*.} == "$fr" ]] && echo "mv $f ${f%$fr}$to"
    done
}

function wget_mirror()
{
   URL="$1"
   NEW="${URL//\//^}"
   mkdir "$NEW"
   (
      cd "$NEW" &&
      wget -nd -pHEKk "$URL";
   )        
}
