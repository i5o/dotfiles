#!/bin/sh
# vim: set ft=sh et sw=4 sts=4 ts=4:


#function webget() {
#  URL=$1
#  [[ -z "$OUT" ]] && { echo "webget <URL> --  pipe the contents of <URL> "; return 1; };
#  wget -qO - "$URL"
#}


# enhanced pgrep # from meonkey's .bashrc
p() {
    prog=$1
    found=`pgrep $prog`
    # command name width
    if [ ! -z "$2" ]
    then
        cmdwide='cmd -ww'
    else
        cmdwide='comm'
    fi
    if [ ! -z "$prog" ] && [ ! -z "$found" ]
    then
        ps -o user,pid,ppid,%cpu,%mem,stat,$cmdwide -p `pgrep $prog`
    fi
}

pw() {
    p "$1" show_wide_command_line
}


mcd ()
{
    mkdir "$@" && cd "${!#}"
}

cdl() {
if [ "$1" ]
    then builtin cd "$1" && ll
    else builtin cd && ll
fi
}

function ttmp () {
    DIR=${HOME}/tmp
    TEMPLATE=tmp.$(date "+%m-%d")

    if [ -d $DIR/$TEMPLATE/ ]; then
         cd $DIR/$TEMPLATE && ls -l *
    else
        mkdir $DIR/$TEMPLATE && cd $DIR/$TEMPLATE
    fi
}


function _list_paths {
	echo -e "${PATH//:/\n}";
}


#we don't want these functions defined on any IR servers
if [ "$(whoami)" != "spowers" ]; then

    function curl() {
        loggertown curl "$@"
        command curl "$@"
    }
    function tar() {
        loggertown tar "$@"
        command tar "$@"
    }
    function find() {
        loggertown find "$@"
        command find "$@"
    }
    function ssh() {
        loggertown ssh "$@"
        command ssh "$@"
    }
    function wget() {
        loggertown wget "$@"
        command wget "$@"
    }

fi


function epochtime () {
	date --date '1970-01-01 UTC '$1' seconds' $2
}

#taken from !du-h in #bash
function dusk () {
   du -sk "$@" | 
   sort -n  |
   awk '{
      if ($1 > 1000000)   printf("%.2fG\t%s\n",$1/1000000,$2);
      else if ($1 > 1000) printf("%.2fM\t%s\n",$1/1000,$2);
      else                printf("%sk\t%s\n",  $1,$2)
   }';
}

function webget() {
if [ -x "`which curl`" ]; then
   get="curl -s"
else
   get="wget -qO -"
fi
}

function pyget() {
   python -c "import urllib2; print urllib2.urlopen(\"$1\").read()"
}

function webheaders() {
   python -c "import urllib2; print urllib2.urlopen(\"$1\").info()"
}

function assert_file {
   ONE=$1
   [[ -z "$ONE" ]] && { echo "MISSING PARAMETER"; return 1; };
   [[ -f "$ONE" ]] || { echo "$ONE: IS NOT A FILE"; return 1; };
}


# http://bash-hackers.org/wiki/doku.php/snipplets/prargs
function print_arglist {
   printf '"%b"\n' "$0" "$@" | nl -v0 -s": "
}

function pipelast () {
   history 2 | sed 2d | colopipe
   history 2 | sed 2d | emailpipe
}

function sendlast () {
   history 2 | sed 2d | colopipe
}

function sendlast2 () {
   history 2 | sed 2d | emailpipe
}

function emailpipe () {
   curl -F "note=<-" http://sente.cc/cgi-bin/email.pl
}

function curlnote () {
   if [ ! -f "$1" ]; then echo "$1 is not a file"; return 1; fi
   curl -F "note=<$1" http://sente.cc/cgi-bin/note.pl 2>/dev/null | grep -m1 -o -E '"http://[^"]+"'
#  curl -F "note=<$1" http://sente.cc/cgi-bin/note.pl 2>/dev/null  
   echo "http://sente.cc/notes/recent/"
   #curl -F "note=<$1" http://sente.cc/cgi-bin/note.pl 2>/dev/null | grep -o -E 'http://[0-9_a-zA-Z./-]+'
}
function webdiff () {
   if [ ! -f "$1" ]; then echo "$1 is not a file"; return 1; fi
   if [ ! -f "$2" ]; then echo "$2 is not a file"; return 1; fi
   F1=$(basename $1); F2=$(basename $2)
   if [ $F1 = $F2 ]; then
      F1=$F1.1
      F2=$F2.2
   fi
   curl -F "file.1=@$1;filename=${F1}" \
        -F "file.2=@$2;filename=${F2}" \
        http://sente.cc/stu/cgi-bin/compare-bin.py 2>/dev/null \
         | grep -A 100 "BEGIN LINKS" \
            | grep '^http' 
   #curl -F "file.1=@$1" -F "file.2=@$2"  http://sente.cc/stu/cgi-bin/compare-bin.py 2>/dev/null | grep -A 100 "BEGIN LINKS" | grep '^http' 
}

function bucket () {
   FILE=$1
   test -f "$FILE" && 
   cp -a "$FILE" /home/stu/code/github/bucket/ &&
   FILE=$(basename $FILE)
   cd /home/stu/code/github/bucket/ &&
   git add "$FILE" &&
   git commit -m "$FILE" &&
   git push gitweb master && 
   cd -;
}
function dotadd () {
   FILE=$1
   arr=("$@")
   [ ${#arr[@]} -lt 2 ] && { echo "must pass params"; return 1; }

   test -f "$FILE" && 
   echo cp "${HOME}/${FILE}" "/home/stu/code/github/dotfiles/${FILE}" &&
   echo cd /home/stu/code/github/dotfiles/ &&
   echo git status &&
   echo git add "${FILE}" &&
   echo git commit -m ${arr[1]} &&
   echo git status &&
   echo git-archive --format=tar HEAD > /home/stu/dotfiles.tar &&
   echo cd - 


   cp "${HOME}/${FILE}" "/home/stu/code/github/dotfiles/${FILE}" &&
   cd /home/stu/code/github/dotfiles/ &&
   git status &&
   git add "${FILE}" &&
   git commit -m ${arr[1]} &&
   git status &&
   git-archive --format=tar HEAD > /home/stu/dotfiles.tar &&
   cd - 


#   git add "$FILE" &&
#   git commit -m "$FILE" &&
#   git push gitweb master && 
}

function git-tar () {
    cd /home/stu/code/github/dotfiles &&
    git-status &&
    git-archive --format=tar HEAD > /home/stu/dotfiles.tar
}



function curl_note () {
   curl -F "note=<-" http://sente.cc/cgi-bin/email.pl
}


#stolen from tpope:  http://www.tpope.net/node/108  http://c.tpope.net/
function get_tgzfile() {
   REMOTEFILE=http://sente.cc/stu/dotfiles.tgz
   DESTDIR=DOTFILES
   mkdir $DESTDIR || return 1

   if [ -x "`which curl`" ];
      then get="curl -s"
      else get="wget -qO -"
   fi
   $get $REMOTEFILE | gzip -dc | tar xf - -C $DESTDIR
   find $REMOTEFILE
}



function fstr() # find a string in a set of files
{
  if [ $# -ne 2 ]; then
    echo "Usage: fstr \"pattern\" [files] "
    return;
  fi
  SMSO=$(tput smso)
  RMSO=$(tput rmso)
  find . -type f -name "*${2}" -print | xargs grep -sin "$1" | \
  sed "s/$1/$SMSO$1$RMSO/gI"
}


function hlocate    { locate -d '/home/stu/.mlocate.db' "$@"; }
function irdaily    { locate -d '/var/lib/mlocate/mlocate.ir-daily.db'   "$@"; }

function locate_migration { locate -d '/var/lib/mlocate/mlocate.migration.db' "$@";  }
function locate_scratch { locate -d '/var/lib/mlocate/mlocate.scratch.db' "$@";  }
function locate_irdaily { locate -d '/var/lib/mlocate/mlocate.ir-daily.db' "$@";  }
function locate_snapshot { ls -1 /snapshots/locate/*.db; locate -d '/snapshots/locate/daily.0.db' "$@";  }



#function irslocate  { locate -d '/var/lib/mlocate/mlocate.ir-scripts.db' "$@"; }
#function irlocate   { locate -d '/var/lib/mlocate/mlocate.ir.db'        "$@"; }
#function alllocate  { locate -d '/var/lib/mlocate/mlocate.all.db'          "$@"; }
#function snaplocate { locate -d '/var/lib/mlocate/mlocate.snapshots.db'  "$@"; }
#function intlocate  { locate -d '/var/lib/mlocate/mlocate.ir.db'        "$@" | grep -E "\.int$|\.dsc$\.sh"; }

function ff         { find . -name "*$@*" -print 2>/dev/null; }

function psa        { ps aux $@; }
function psu        { ps  ux $@; }

function lpsa       { ps aux $@ | p; }
function lpsu       { ps  ux $@ | p; }

function pushvim    { for s in ${@}; do rsync -avPr --delete-after .vim .vimrc .screenrc .inputrc $s:; done; }

function psgrep     { ps ax | grep $1 | fgrep -v "grep $1"; }
function hgrep      { history | grep $1 | sed '$d'; }


# Rename *.foo to *.bar
function rename_ext {
    for f in *.$1; do
        mv $f ${f%$1}$2
    done
}

function wget_mirror()
{
   URL="$1"
   NEW="${URL//\//^}"
   mkdir "$NEW"
   (
      cd "$NEW" &&
      wget -nd -pHEKk "$URL";
   )        
}

# vim:filetype=sh
